import("//msl-core.gni")
print("=====is_ios:$is_ios is_android:$is_android is_linux:$is_linux is_mac:$is_mac")
group("default") {
  deps = []
  if (is_ios) {
    deps += [
      "//sdk/msl-core:framework_objc",
    ]
  } else if (is_mac) {
    deps += [
      "//sdk/msl-core:mac_framework_objc",
    ]
  } else if (is_android) {
    deps += [
      "//sdk/msl-core:libms-core",
    ]
  } else if (is_linux) {
    deps += [
      "//sdk/msl-core/linux:linux",
    ]
  }
}


# Abseil Flags by default doesn't register command line flags on mobile
# platforms, WebRTC tests requires them (e.g. on simualtors) so this
# config will be applied to testonly targets globally (see webrtc.gni).
config("absl_flags_configs") {
  defines = [ "ABSL_FLAGS_STRIP_NAMES=0" ]
}

config("library_impl_config") {
  # Build targets that contain WebRTC implementation need this macro to
  # be defined in order to correctly export symbols when is_component_build
  # is true.
  # For more info see: rtc_base/build/rtc_export.h.
  defines = [ "WEBRTC_LIBRARY_IMPL" ]
}

# Contains the defines and includes in common.gypi that are duplicated both as
# target_defaults and direct_dependent_settings.
config("common_inherited_config") {
  defines = []
  cflags = []
  ldflags = []

  if (is_posix || is_fuchsia) {
    defines += [ "WEBRTC_POSIX" ]
  }
  if (is_ios) {
    defines += [
      "WEBRTC_MAC",
      "WEBRTC_IOS",
    ]
  }
  if (is_linux || is_chromeos) {
    defines += [ "WEBRTC_LINUX" ]
  }
  if (is_mac) {
    defines += [ "WEBRTC_MAC" ]
  }
  if (is_fuchsia) {
    defines += [ "WEBRTC_FUCHSIA" ]
  }
  if (is_win) {
    defines += [ "WEBRTC_WIN" ]
  }
  if (is_android) {
    defines += [
      "WEBRTC_LINUX",
      "WEBRTC_ANDROID",
    ]

    if (build_with_mozilla) {
      defines += [ "WEBRTC_ANDROID_OPENSLES" ]
    }
  }
  if (is_chromeos) {
    defines += [ "CHROMEOS" ]
  }
}

# TODO(bugs.webrtc.org/9693): Remove the possibility to suppress this warning
# as soon as WebRTC compiles without it.
config("no_exit_time_destructors") {
  if (is_clang) {
    cflags = [ "-Wno-exit-time-destructors" ]
  }
}

# TODO(bugs.webrtc.org/9693): Remove the possibility to suppress this warning
# as soon as WebRTC compiles without it.
config("no_global_constructors") {
  if (is_clang) {
    cflags = [ "-Wno-global-constructors" ]
  }
}

config("rtc_prod_config") {
  # Ideally, WebRTC production code (but not test code) should have these flags.
  if (is_clang) {
    cflags = [
      "-Wexit-time-destructors",
      "-Wglobal-constructors",
    ]
  }
}

config("common_config") {
  cflags = []
  cflags_c = []
  cflags_cc = []
  cflags_objc = []
  defines = []

  cflags = []

  #   if (is_clang) {
  #     cflags += [
  #       "-Wc++11-narrowing",
  #       "-Wimplicit-fallthrough",
  #       "-Wthread-safety",
  #       "-Winconsistent-missing-override",
  #       "-Wundef",
  #     ]

  #     # use_xcode_clang only refers to the iOS toolchain, host binaries use
  #     # chromium's clang always.
  #     if (!is_nacl &&
  #         (!use_xcode_clang || current_toolchain == host_toolchain)) {
  #       # Flags NaCl (Clang 3.7) and Xcode 7.3 (Clang clang-703.0.31) do not
  #       # recognize.
  #       cflags += [ "-Wunused-lambda-capture" ]
  #     }

  #     if (use_xcode_clang) {
  #       # This may be removed if the clang version in xcode > 12.4 includes the
  #       # fix https://reviews.llvm.org/D73007.
  #       # https://bugs.llvm.org/show_bug.cgi?id=44556
  #       cflags += [ "-Wno-range-loop-analysis" ]
  #     }
  #   }

  #   if (is_win && !is_clang) {
  #     # MSVC warning suppressions (needed to use Abseil).
  #     # TODO(bugs.webrtc.org/9274): Remove these warnings as soon as MSVC allows
  #     # external headers warning suppression (or fix them upstream).
  #     cflags += [ "/wd4702" ]  # unreachable code

  #     # MSVC 2019 warning suppressions for C++17 compiling
  #     cflags +=
  #         [ "/wd5041" ]  # out-of-line definition for constexpr static data
  #                        # member is not needed and is deprecated in C++17
  #   }
  # }

  if (current_cpu == "arm64") {
    defines += [ "WEBRTC_ARCH_ARM64" ]
    defines += [ "WEBRTC_HAS_NEON" ]
  }

  if (current_cpu == "arm") {
    defines += [ "WEBRTC_ARCH_ARM" ]
    if (arm_version >= 7) {
      defines += [ "WEBRTC_ARCH_ARM_V7" ]
      if (arm_use_neon) {
        defines += [ "WEBRTC_HAS_NEON" ]
      }
    }
  }

  if (current_cpu == "mipsel") {
    defines += [ "MIPS32_LE" ]
    if (mips_float_abi == "hard") {
      defines += [ "MIPS_FPU_LE" ]
    }
    if (mips_arch_variant == "r2") {
      defines += [ "MIPS32_R2_LE" ]
    }
    if (mips_dsp_rev == 1) {
      defines += [ "MIPS_DSP_R1_LE" ]
    } else if (mips_dsp_rev == 2) {
      defines += [
        "MIPS_DSP_R1_LE",
        "MIPS_DSP_R2_LE",
      ]
    }
  }

  if (is_android && !is_clang) {
    # The Android NDK doesn"t provide optimized versions of these
    # functions. Ensure they are disabled for all compilers.
    cflags += [
      "-fno-builtin-cos",
      "-fno-builtin-sin",
      "-fno-builtin-cosf",
      "-fno-builtin-sinf",
    ]
  }

  # if (use_fuzzing_engine && optimize_for_fuzzing) {
  #   # Used in Chromium's overrides to disable logging
  #   defines += [ "WEBRTC_UNSAFE_FUZZER_MODE" ]
  # }

  # if (!build_with_chromium && rtc_win_undef_unicode) {
  #   cflags += [
  #     "/UUNICODE",
  #     "/U_UNICODE",
  #   ]
  # }
}

config("common_objc") {
  frameworks = [ "Foundation.framework" ]

  # if (rtc_use_metal_rendering) {
  #   defines = [ "RTC_SUPPORTS_METAL" ]
  # }
}

# ---- Poisons ----
#
# Here is one empty dummy target for each poison type (needed because
# "being poisonous with poison type foo" is implemented as "depends on
# //:poison_foo").
#
# The set of poison_* targets needs to be kept in sync with the
# `all_poison_types` list in webrtc.gni.
#
group("poison_audio_codecs") {
}

group("poison_default_task_queue") {
}

group("poison_rtc_json") {
}

group("poison_software_video_codecs") {
}

