# Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
#
# Use of this source code is governed by a BSD-style license
# that can be found in the LICENSE file in the root of the source
# tree. An additional intellectual property rights grant can be found
# in the file PATENTS.  All contributing project authors may
# be found in the AUTHORS file in the root of the source tree.
import("../ms-core.gni")
group("sdk") {
  public_deps = []
  if (is_ios) {
    public_deps += [ ":framework_objc" ]
  }

  if (is_mac) {
    public_deps += [ ":mac_framework_objc" ]
  }
}
if (is_android) {
  import("//build/config/android/config.gni")
  import("//build/config/android/rules.gni")

  group("android") {
    if (is_android) {
      public_deps = [
        ":libms-core",
        # ":libms-framework",
      ]
    }
  }

  # dist_jar("libms-framework") {
  #   _target_dir_name = get_label_info(":$target_name", "dir")
  #   output = "${root_out_dir}/lib.java${_target_dir_name}/${target_name}.jar"
  #   print("=======dist_jar output:$output")
  #   print("=======dist_jar _target_dir_name:$_target_dir_name")
  #   direct_deps_only = true
  #   use_unprocessed_jars = true
  #   no_build_hooks = true
  #   deps = [
  #     ":ms_java"
  #   ]
  # }

  # java_library("ms_java") {
  #   sources = [
  #     "api/media/ushow/ms/Constants.java",
  #   ]
  # }
  #   shared_library("libms-core") {
  #   visibility = [ "*" ]
  #   sources = [ "src/test.cc" ]
  #   ldflags = [
  #     "-Wl,--build-id",
  #   ]
  #   deps = [
  #     ":libms-core_static",
  #   ]
  #   output_extension = "so"
  # }

  shared_library("libms-core") {
    visibility = [ "*" ]
    # sources = [ "src/test.cc" ]
    ldflags = [
      "-Wl,--build-id",
      "-static-libstdc++"
    ]
    deps = [
      "//third_party/spdlog:spdlog",
      "./src:libmsl_static"
    ]
    output_extension = "so"
  }
}

if (is_ios || is_mac) {
  rtc_library("zorro_objc") {
    visibility = [ "*" ]
    # allow_poison = [
    #   "audio_codecs",  # TODO(bugs.webrtc.org/8396): Remove.
    #   "default_task_queue",
    # ]
    configs += [
      "..:no_exit_time_destructors",
      "..:no_global_constructors",
    ]
    sources = [
      "objc/api/RTCTtt.h",
      "objc/api/RTCTtt.mm",
    ]

    frameworks = [
      "Foundation.framework",
    ]
    # configs += [
    #   "..:common_objc",
    #   ":used_from_extension",
    # ]
    # public_configs = [ ":common_config_objc" ]

    deps = [
      "./src:libmsl_static",
      "//third_party/spdlog:spdlog",
    ]

    # if (is_ios) {
    #   deps += [ ":native_api_audio_device_module" ]
    # }
  }
}

if (is_ios) {
  import("//build/config/ios/ios_sdk.gni")
  import("//build/config/ios/rules.gni")
  if (is_ios) {
      ios_framework_bundle_with_umbrella_header("framework_objc") {
        info_plist = "objc/Info.plist"
        output_name = "ZorroRtcEngineKit"

        common_objc_headers = [
          # "objc/base/RTCCodecSpecificInfo.h",
          # "objc/base/RTCEncodedImage.h",
          # "objc/base/RTCI420Buffer.h",
          # "objc/base/RTCLogging.h",
          "objc/base/RTCMacros.h",
          "objc/api/RTCTtt.h",
        ]

        # if (!build_with_chromium) {
          # common_objc_headers += [
            # "objc/api/logging/RTCCallbackLogger.h",
            # "objc/api/peerconnection/RTCFileLogger.h",
          # ]
        # }

        sources = common_objc_headers
        public_headers = common_objc_headers

        ldflags = [
          "-all_load",
          "-install_name",
          "@rpath/$output_name.framework/$output_name",
        ]

        deps = [
          # ":audio_objc",
          # ":base_objc",
          # ":default_codec_factory_objc",
          # ":native_api",
          # ":native_video",
          # ":peerconnectionfactory_base_objc",
          ":zorro_objc",
          # ":ui_objc",
          # ":videocapture_objc",
          # ":videocodec_objc",
          # ":videotoolbox_objc",
          # "../rtc_base:rtc_base_approved",
        ]
        # if (rtc_use_metal_rendering) {
          # deps += [ ":metal_objc" ]
        # }
        # if (!build_with_chromium) {
          # deps += [
            # ":callback_logger_objc",
            # ":file_logger_objc",
          # ]
        # }

        frameworks = [
          "Foundation.framework",
          "CoreGraphics.framework",
          "CoreMedia.framework",
          "GLKit.framework",
        ]

        # configs += [
        #   "..:common_objc",
        #   ":used_from_extension",
        # ]

        # public_configs = [ ":common_config_objc" ]
      }

      bundle_data("ios_framework_bundle") {
        deps = [ "../sdk:framework_objc" ]
        sources = [ "$root_build_dir/ZorroRtcEngineKit.framework" ]
        outputs = [ "{{bundle_resources_dir}}/Frameworks/{{source_file_part}}" ]
      }
    }
}

if (is_mac) {
  import("//build/config/mac/mac_sdk.gni")
  import("//build/config/mac/rules.gni")
  if (is_mac) {
      mac_framework_bundle_with_umbrella_header("mac_framework_objc") {
        info_plist = "objc/Info.plist"
        output_name = "ZorroRtcEngineKit"

        sources = [
          # "objc/base/RTCCodecSpecificInfo.h",
          # "objc/base/RTCEncodedImage.h",
          # "objc/base/RTCI420Buffer.h",
          "objc/api/RTCTtt.h",
          "objc/base/RTCMacros.h",
        ]

        # if (!build_with_chromium) {
          # common_objc_headers += [
            # "objc/api/logging/RTCCallbackLogger.h",
            # "objc/api/peerconnection/RTCFileLogger.h",
          # ]
        # }

        # sources = common_objc_headers
        # public_headers = common_objc_headers

        # ldflags = [
        #   "-all_load",
        #   "-install_name",
        #   "@rpath/$output_name.framework/$output_name",
        # ]

        deps = [
          # ":audio_objc",
          # ":base_objc",
          # ":default_codec_factory_objc",
          # ":native_api",
          # ":native_video",
          # ":peerconnectionfactory_base_objc",
          ":zorro_objc",
          # ":ui_objc",
          # ":videocapture_objc",
          # ":videocodec_objc",
          # ":videotoolbox_objc",
          # "../rtc_base:rtc_base_approved",
        ]
        # if (rtc_use_metal_rendering) {
          # deps += [ ":metal_objc" ]
        # }
        # if (!build_with_chromium) {
          # deps += [
            # ":callback_logger_objc",
            # ":file_logger_objc",
          # ]
        # }

        frameworks = [
          "Foundation.framework",
        ]

        # configs += [
        #   "..:common_objc",
        #   ":used_from_extension",
        # ]

        # public_configs = [ ":common_config_objc" ]
      }

      bundle_data("mac_framework_bundle") {
        deps = [ "../sdk:mac_framework_objc" ]
        sources = [ "$root_build_dir/ZorroRtcEngineKit.framework" ]
        outputs = [ "{{bundle_resources_dir}}/Frameworks/{{source_file_part}}" ]
      }
    }
}